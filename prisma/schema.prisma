// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials-based authentication
  accounts      Account[]
  sessions      Session[]
  
  // PayFlow specific fields
  sentDocuments     Document[] @relation("DocumentSender")
  signedDocuments   Signature[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  fileName    String
  fileSize    Int
  mimeType    String
  
  // Document status
  status      DocumentStatus @default(DRAFT)
  
  // Relationships
  senderId    String
  sender      User       @relation("DocumentSender", fields: [senderId], references: [id])
  signatures  Signature[]
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime?
}

model Signature {
  id          String @id @default(cuid())
  
  // Signature data
  signatureData String? // Base64 encoded signature
  signedAt      DateTime?
  ipAddress     String?
  
  // Recipient info
  recipientEmail String
  recipientName  String?
  
  // Relationships
  documentId    String
  document      Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  
  // Status
  status        SignatureStatus @default(PENDING)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum DocumentStatus {
  DRAFT
  SENT
  COMPLETED
  EXPIRED
  CANCELLED
}

enum SignatureStatus {
  PENDING
  SIGNED
  DECLINED
  EXPIRED
}